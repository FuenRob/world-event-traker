{"version":3,"sources":["components/LocationMarker.js","components/LocationInfoBox.js","components/Map.js","components/spinner.gif","components/Loader.js","components/Header.js","App.js","reportWebVitals.js","index.js"],"names":["LocationMarker","type","onClick","lat","lng","className","icon","locationFireIcon","locationStormsIcon","LocationInfoBox","info","id","title","Map","eventData","center","zoom","useState","locationInfo","setLocationInfo","markers","map","ev","categories","geometries","coordinates","length","bootstrapURLKeys","key","defaultCenter","defaultZoom","defaultProps","Loader","src","spinner","alt","Header","App","setEventData","loading","setLoading","useEffect","a","fetch","res","json","events","fetchEvents","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4RAYeA,EARQ,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,KAAgBC,GAAc,EAAxBC,IAAwB,EAAnBC,IAAmB,EAAdF,SACtC,OACI,qBAAKG,UAAU,kBAAkBH,QAAUA,EAA3C,SACI,cAAC,OAAD,CAAMI,KAAgB,SAATL,EAAkBM,IAAqBC,IAAoBH,UAAS,wBAAmBJ,QCKjGQ,EAZS,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACvB,OACI,sBAAKL,UAAU,gBAAf,UACI,qDACA,+BACI,sCAAQ,iCAAUK,EAAKC,QACvB,sCAAQ,iCAAUD,EAAKE,kBCDjCC,EAAM,SAAC,GAAiC,IAA/BC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,OAAQC,EAAW,EAAXA,KAAW,EAEDC,mBAAS,MAFR,mBAElCC,EAFkC,KAEpBC,EAFoB,KAInCC,EAAUN,EAAUO,KAAI,SAACC,GAC3B,OAA4B,IAAxBA,EAAGC,WAAW,GAAGZ,GACV,cAAC,EAAD,CACHV,KAAK,OACLE,IAAMmB,EAAGE,WAAW,GAAGC,YAAY,GACnCrB,IAAMkB,EAAGE,WAAW,GAAGC,YAAY,GACnCvB,QAAS,kBAAMiB,EAAgB,CAAER,GAAIW,EAAGX,GAAIC,MAAOU,EAAGV,WAE3B,KAAxBU,EAAGC,WAAW,GAAGZ,GACjB,cAAC,EAAD,CACHV,KAAK,QACLE,IAAMmB,EAAGE,WAAWF,EAAGE,WAAWE,OAAS,GAAGD,YAAY,GAC1DrB,IAAMkB,EAAGE,WAAWF,EAAGE,WAAWE,OAAS,GAAGD,YAAY,GAC1DvB,QAAS,kBAAMiB,EAAgB,CAAER,GAAIW,EAAGX,GAAIC,MAAOU,EAAGV,WAGvD,QAGX,OACI,sBAAKP,UAAU,MAAf,UACI,cAAC,IAAD,CACIsB,iBAAkB,CAAEC,IAAK,2CACzBC,cAAgBd,EAChBe,YAAcd,EAHlB,SAKKI,IAEJF,GAAgB,cAAC,EAAD,CAAiBR,KAAMQ,QAKpDL,EAAIkB,aAAe,CACfhB,OAAQ,CACJZ,IAAK,QACLC,KAAM,OAEVY,KAAM,GAGKH,QClDA,MAA0B,oCCW1BmB,EATA,WACX,OACI,sBAAK3B,UAAU,SAAf,UACI,qBAAK4B,IAAKC,EAASC,IAAI,YACvB,mDCGGC,EATA,WACX,OACI,wBAAQ/B,UAAU,SAAlB,SACI,2EC4BGgC,MA1Bf,WAAgB,IAAD,EAEqBpB,mBAAS,IAF9B,mBAENH,EAFM,KAEKwB,EAFL,OAGiBrB,oBAAS,GAH1B,mBAGNsB,EAHM,KAGGC,EAHH,KAkBb,OAbAC,qBAAU,YACS,uCAAG,gCAAAC,EAAA,6DAClBF,GAAW,GADO,SAEAG,MAAM,mDAFN,cAEZC,EAFY,gBAGOA,EAAIC,OAHX,gBAGVC,EAHU,EAGVA,OAERR,EAAaQ,GACbN,GAAW,GANO,4CAAH,qDASjBO,KACC,IAGD,gCACE,cAAC,EAAD,IACGR,EAA0C,cAAC,EAAD,IAAhC,cAAC,EAAD,CAAKzB,UAAWA,QCdpBkC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.bf6b3437.chunk.js","sourcesContent":["import { Icon } from '@iconify/react'\r\nimport locationFireIcon from '@iconify/icons-mdi/fire-alert'\r\nimport locationStormsIcon from '@iconify/icons-mdi/weather-lightning-rainy'\r\n\r\nconst LocationMarker = ({ type, lat, lng, onClick }) => {\r\n    return (\r\n        <div className=\"location-marker\" onClick={ onClick }>\r\n            <Icon icon={ type === 'fire' ? locationFireIcon  :  locationStormsIcon} className={`location-icon ${type}`} />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationMarker","const LocationInfoBox = ({ info }) => {\r\n    return (\r\n        <div className=\"location-info\">\r\n            <h2>Event Location Info</h2>\r\n            <ul>\r\n                <li>ID: <strong>{ info.id }</strong></li>\r\n                <li>ID: <strong>{ info.title }</strong></li>\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LocationInfoBox","import { useState } from 'react'\r\nimport GoogleMapReact from 'google-map-react'\r\nimport LocationMarker from './LocationMarker'\r\nimport LocationInfoBox from './LocationInfoBox'\r\n\r\nconst Map = ({ eventData, center, zoom }) => {\r\n\r\n    const [locationInfo, setLocationInfo] = useState(null)\r\n\r\n    const markers = eventData.map((ev) => {\r\n        if (ev.categories[0].id === 8) {\r\n            return <LocationMarker \r\n                type=\"fire\"\r\n                lat={ ev.geometries[0].coordinates[1] } \r\n                lng={ ev.geometries[0].coordinates[0] } \r\n                onClick={() => setLocationInfo({ id: ev.id, title: ev.title })}\r\n            />\r\n        } else if (ev.categories[0].id === 10) {\r\n            return <LocationMarker \r\n                type=\"storm\"\r\n                lat={ ev.geometries[ev.geometries.length - 1].coordinates[1] } \r\n                lng={ ev.geometries[ev.geometries.length - 1].coordinates[0] } \r\n                onClick={() => setLocationInfo({ id: ev.id, title: ev.title })}\r\n            />\r\n        }\r\n        return null\r\n    })\r\n\r\n    return (\r\n        <div className=\"map\">\r\n            <GoogleMapReact\r\n                bootstrapURLKeys={{ key: 'AIzaSyCMgGAY0MaBzjQ1ieByaPz5XC34g-X2Yqo' }}\r\n                defaultCenter={ center }\r\n                defaultZoom={ zoom }\r\n            >\r\n                {markers}\r\n            </GoogleMapReact>\r\n            {locationInfo && <LocationInfoBox info={locationInfo} />}\r\n        </div>\r\n    )\r\n}\r\n\r\nMap.defaultProps = {\r\n    center: {\r\n        lat: 40.0292,\r\n        lng: -3.6180\r\n    },\r\n    zoom: 3\r\n}\r\n\r\nexport default Map","export default __webpack_public_path__ + \"static/media/spinner.1a32f552.gif\";","import spinner from './spinner.gif'\r\n\r\nconst Loader = () => {\r\n    return (\r\n        <div className=\"loader\">\r\n            <img src={spinner} alt=\"Loading\" />\r\n            <h1>Fetching Data</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Loader","const Header = () => {\r\n    return (\r\n        <header className=\"header\">\r\n            <h1>Events World Tracker (Powered by NASA)</h1>\r\n\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default Header","import { useState, useEffect } from 'react'\nimport Map from './components/Map'\nimport Loader from './components/Loader'\nimport Header from './components/Header'\n\nfunction App() {\n\n  const [eventData, setEventData] = useState([])\n  const [loading, setLoading] = useState(false)\n\n  useEffect(() => {\n    const fetchEvents = async () => {\n      setLoading(true)\n      const res = await fetch('https://eonet.sci.gsfc.nasa.gov/api/v2.1/events')\n      const { events } = await res.json()\n\n      setEventData(events)\n      setLoading(false)\n    }\n\n    fetchEvents()\n  }, [])\n\n  return (\n    <div>\n      <Header />\n      { !loading ? <Map eventData={eventData} /> : <Loader /> }\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}